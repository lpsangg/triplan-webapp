"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Brain, Sparkles, MapPin, Clock, DollarSign, Heart } from "lucide-react"

interface AIItineraryRequest {
  destination: string
  days: number
  budget: "low" | "medium" | "high"
  interests: string[]
  pace: "relaxed" | "moderate" | "packed"
  travelStyle: string[]
  additionalNotes?: string
}

const interests = [
  { id: "food", label: "·∫®m th·ª±c", icon: "üçΩÔ∏è" },
  { id: "history", label: "L·ªãch s·ª≠", icon: "üèõÔ∏è" },
  { id: "nature", label: "Thi√™n nhi√™n", icon: "üåø" },
  { id: "adventure", label: "M·∫°o hi·ªÉm", icon: "üèîÔ∏è" },
  { id: "shopping", label: "Mua s·∫Øm", icon: "üõçÔ∏è" },
  { id: "nightlife", label: "Cu·ªôc s·ªëng v·ªÅ ƒë√™m", icon: "üåÉ" },
  { id: "culture", label: "VƒÉn h√≥a", icon: "üé≠" },
  { id: "photography", label: "Nhi·∫øp ·∫£nh", icon: "üì∏" },
  { id: "wellness", label: "S·ª©c kh·ªèe", icon: "üßò" },
  { id: "beach", label: "Bi·ªÉn", icon: "üèñÔ∏è" },
]

const travelStyles = [
  { id: "backpacker", label: "Ph∆∞·ª£t th·ªß" },
  { id: "luxury", label: "Cao c·∫•p" },
  { id: "family", label: "Gia ƒë√¨nh" },
  { id: "couple", label: "C·∫∑p ƒë√¥i" },
  { id: "solo", label: "M·ªôt m√¨nh" },
  { id: "group", label: "Nh√≥m b·∫°n" },
]

// Helper: l·∫•y key ƒë·ªông v√† itinerary t·ª´ object AI tr·∫£ v·ªÅ
function extractItinerary(aiObj: any) {
  if (!aiObj || typeof aiObj !== "object") return { tripKey: null, itinerary: null };
  const tripKey = Object.keys(aiObj)[0];
  const itinerary = aiObj[tripKey]?.itinerary || null;
  return { tripKey, itinerary };
}

export default function AIItineraryGenerator({
  onSubmit,
}: {
  onSubmit: (name: string, destination: string, startDate: string, endDate: string) => void
}) {
  const [step, setStep] = useState(1)
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedItinerary, setGeneratedItinerary] = useState<any>(null)
  const [formData, setFormData] = useState<AIItineraryRequest>({
    destination: "",
    days: 3,
    budget: "medium",
    interests: [],
    pace: "moderate",
    travelStyle: [],
    additionalNotes: "",
  })

  const handleInterestToggle = (interestId: string) => {
    setFormData((prev) => ({
      ...prev,
      interests: prev.interests.includes(interestId)
        ? prev.interests.filter((id) => id !== interestId)
        : [...prev.interests, interestId],
    }))
  }

  const handleTravelStyleToggle = (styleId: string) => {
    setFormData((prev) => ({
      ...prev,
      travelStyle: prev.travelStyle.includes(styleId)
        ? prev.travelStyle.filter((id) => id !== styleId)
        : [...prev.travelStyle, styleId],
    }))
  }

  const generateItinerary = async () => {
    setIsGenerating(true);

    // T·∫°o prompt ƒë·ªông t·ª´ formData
    const prompt = `L√™n l·ªãch tr√¨nh du l·ªãch ho√†n ch·ªânh cho ${formData.days} ng√†y t·∫°i ${formData.destination}.
Ng√¢n s√°ch: ${formData.budget} VNƒê.
Nh·ªãp ƒë·ªô chuy·∫øn ƒëi: ${formData.pace}.
S·ªü th√≠ch: ${formData.interests.join(", ")}.
Phong c√°ch: ${formData.travelStyle.join(", ")}.
Ghi ch√∫: ${formData.additionalNotes || "Kh√¥ng"}.
H√£y ph√¢n b·ªï l·ªãch tr√¨nh h·ª£p l√Ω, ƒëa d·∫°ng, ph√π h·ª£p ng√¢n s√°ch v√† nh·ªãp ƒë·ªô.
Tr·∫£ v·ªÅ k·∫øt qu·∫£ d·∫°ng JSON, m·ªói ng√†y l√† m·ªôt m·∫£ng ho·∫°t ƒë·ªông (t√™n, lo·∫°i, th·ªùi gian, g·ª£i √Ω ƒÉn u·ªëng/ngh·ªâ ng∆°i).`;

    // G·ªçi API backend
    const res = await fetch("/api/ai-itinerary", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt })
    });
    const data = await res.json();
    let aiResult = data.result;
    let itinerary = null;
    console.log('AI raw result:', aiResult); // DEBUG
    try {
      itinerary = JSON.parse(aiResult);
    } catch {
      // N·∫øu kh√¥ng ph·∫£i JSON, hi·ªÉn th·ªã text
      itinerary = aiResult;
    }
    console.log('Parsed itinerary:', itinerary); // DEBUG
    setGeneratedItinerary(itinerary);
    setIsGenerating(false);
    setStep(3);
  };

  const generateDayActivities = (data: AIItineraryRequest, day: number) => {
    const activities = []

    // Morning activity
    if (data.interests.includes("food")) {
      activities.push({
        time: "08:00",
        name: `ƒÇn s√°ng t·∫°i qu√°n ƒë·ªãa ph∆∞∆°ng n·ªïi ti·∫øng`,
        type: "food",
        location: `${data.destination}`,
        duration: "1 gi·ªù",
        cost: data.budget === "low" ? 50000 : data.budget === "medium" ? 100000 : 200000,
      })
    }

    // Main sightseeing
    if (data.interests.includes("history")) {
      activities.push({
        time: "09:30",
        name: `Tham quan di t√≠ch l·ªãch s·ª≠ ${data.destination}`,
        type: "sightseeing",
        location: `Trung t√¢m ${data.destination}`,
        duration: "2.5 gi·ªù",
        cost: data.budget === "low" ? 100000 : data.budget === "medium" ? 200000 : 300000,
      })
    }

    // Lunch
    activities.push({
      time: "12:30",
      name: "ƒÇn tr∆∞a m√≥n ƒë·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng",
      type: "food",
      location: `${data.destination}`,
      duration: "1 gi·ªù",
      cost: data.budget === "low" ? 100000 : data.budget === "medium" ? 200000 : 400000,
    })

    // Afternoon activity
    if (data.interests.includes("nature")) {
      activities.push({
        time: "14:00",
        name: `Kh√°m ph√° thi√™n nhi√™n xung quanh ${data.destination}`,
        type: "nature",
        location: `Ngo·∫°i √¥ ${data.destination}`,
        duration: "3 gi·ªù",
        cost: data.budget === "low" ? 150000 : data.budget === "medium" ? 300000 : 500000,
      })
    }

    // Shopping
    if (data.interests.includes("shopping")) {
      activities.push({
        time: "17:30",
        name: "Mua s·∫Øm t·∫°i ch·ª£/trung t√¢m th∆∞∆°ng m·∫°i",
        type: "shopping",
        location: `${data.destination}`,
        duration: "1.5 gi·ªù",
        cost: data.budget === "low" ? 200000 : data.budget === "medium" ? 500000 : 1000000,
      })
    }

    return activities
  }

  // Khi ng∆∞·ªùi d√πng ch·ªçn "T·∫°o chuy·∫øn ƒëi m·ªõi" t·ª´ k·∫øt qu·∫£ AI
  const handleCreateTrip = () => {
    if (generatedItinerary && typeof generatedItinerary === "object") {
      const { tripKey, itinerary } = extractItinerary(generatedItinerary);
      const startDate = new Date().toISOString().split("T")[0];
      const endDate = new Date(Date.now() + (formData.days - 1) * 24 * 60 * 60 * 1000).toISOString().split("T")[0];
      onSubmit(
        tripKey && generatedItinerary[tripKey]?.tripName ? generatedItinerary[tripKey].tripName : `Chuy·∫øn ƒëi AI ${formData.destination}`,
        formData.destination,
        startDate,
        endDate
      );
      // L∆∞u ho·∫°t ƒë·ªông v√†o localStorage
      setTimeout(() => {
        const tripId = Date.now();
        const activities = Array.isArray(itinerary)
          ? itinerary.flatMap((day: any) =>
              (day.activities || []).map((activity: any, index: number) => ({
                id: Date.now() + index,
                name: activity.name,
                time: activity.time,
                location: activity.location,
                notes: activity.notes || "",
                type: activity.type || "sightseeing",
                day: day.day,
              }))
            )
          : [];
        localStorage.setItem(`triplan_activities_${tripId}`, JSON.stringify(activities));
      }, 100);
    }
  };

  if (step === 1) {
    return (
      <div className="space-y-6">
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="destination">ƒêi·ªÉm ƒë·∫øn</Label>
            <Input
              id="destination"
              placeholder="VD: ƒê√† N·∫µng, H√† N·ªôi, Tokyo..."
              value={formData.destination}
              onChange={(e) => setFormData((prev) => ({ ...prev, destination: e.target.value }))}
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="days">S·ªë ng√†y</Label>
              <Select
                value={formData.days.toString()}
                onValueChange={(value) => setFormData((prev) => ({ ...prev, days: Number.parseInt(value) }))}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((day) => (
                    <SelectItem key={day} value={day.toString()}>
                      {day} ng√†y
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="budget">Ng√¢n s√°ch</Label>
              <Select
                value={formData.budget}
                onValueChange={(value: "low" | "medium" | "high") =>
                  setFormData((prev) => ({ ...prev, budget: value }))
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="low">Ti·∫øt ki·ªám</SelectItem>
                  <SelectItem value="medium">Trung b√¨nh</SelectItem>
                  <SelectItem value="high">Cao c·∫•p</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-2">
            <Label>Nh·ªãp ƒë·ªô chuy·∫øn ƒëi</Label>
            <Select
              value={formData.pace}
              onValueChange={(value: "relaxed" | "moderate" | "packed") =>
                setFormData((prev) => ({ ...prev, pace: value }))
              }
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="relaxed">Th∆∞ th·∫£</SelectItem>
                <SelectItem value="moderate">V·ª´a ph·∫£i</SelectItem>
                <SelectItem value="packed">D√†y ƒë·∫∑c</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <Button onClick={() => setStep(2)} className="w-full" disabled={!formData.destination}>
          Ti·∫øp theo: Ch·ªçn s·ªü th√≠ch
        </Button>
      </div>
    )
  }

  if (step === 2) {
    return (
      <div className="space-y-6">
        <div className="space-y-4">
          <div className="space-y-3">
            <Label>S·ªü th√≠ch c·ªßa b·∫°n (ch·ªçn nhi·ªÅu)</Label>
            <div className="grid grid-cols-2 gap-3">
              {interests.map((interest) => (
                <div key={interest.id} className="flex items-center space-x-2">
                  <Checkbox
                    id={interest.id}
                    checked={formData.interests.includes(interest.id)}
                    onCheckedChange={() => handleInterestToggle(interest.id)}
                  />
                  <Label htmlFor={interest.id} className="flex items-center space-x-2 cursor-pointer">
                    <span>{interest.icon}</span>
                    <span>{interest.label}</span>
                  </Label>
                </div>
              ))}
            </div>
          </div>

          <div className="space-y-3">
            <Label>Phong c√°ch du l·ªãch</Label>
            <div className="grid grid-cols-2 gap-3">
              {travelStyles.map((style) => (
                <div key={style.id} className="flex items-center space-x-2">
                  <Checkbox
                    id={style.id}
                    checked={formData.travelStyle.includes(style.id)}
                    onCheckedChange={() => handleTravelStyleToggle(style.id)}
                  />
                  <Label htmlFor={style.id} className="cursor-pointer">
                    {style.label}
                  </Label>
                </div>
              ))}
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="notes">Ghi ch√∫ th√™m (t√πy ch·ªçn)</Label>
            <Textarea
              id="notes"
              placeholder="VD: T√¥i mu·ªën tr√°nh ƒë·ªì ƒÉn cay, th√≠ch c√°c ho·∫°t ƒë·ªông ngo√†i tr·ªùi..."
              value={formData.additionalNotes}
              onChange={(e) => setFormData((prev) => ({ ...prev, additionalNotes: e.target.value }))}
            />
          </div>
        </div>

        <div className="flex space-x-3">
          <Button variant="outline" onClick={() => setStep(1)} className="flex-1">
            Quay l·∫°i
          </Button>
          <Button onClick={generateItinerary} className="flex-1" disabled={formData.interests.length === 0}>
            <Sparkles className="h-4 w-4 mr-2" />
            T·∫°o l·ªãch tr√¨nh AI
          </Button>
        </div>
      </div>
    )
  }

  if (step === 3) {
    if (isGenerating) {
      return (
        <div className="space-y-6 text-center py-8">
          <div className="space-y-4">
            <Brain className="h-16 w-16 text-purple-600 mx-auto animate-pulse" />
            <div className="space-y-2">
              <h3 className="text-lg font-semibold">AI ƒëang t·∫°o l·ªãch tr√¨nh cho b·∫°n...</h3>
              <p className="text-gray-600">ƒêang ph√¢n t√≠ch s·ªü th√≠ch v√† t·ªëi ∆∞u h√≥a l·ªô tr√¨nh</p>
            </div>
            <Progress value={66} className="w-full" />
          </div>
        </div>
      )
    }

    if (generatedItinerary) {
      const { tripKey, itinerary } = extractItinerary(generatedItinerary);
      return (
        <div className="space-y-6 max-h-96 overflow-y-auto">
          <div className="text-center space-y-2">
            <h3 className="text-xl font-bold text-green-600">‚ú® L·ªãch tr√¨nh ƒë√£ ƒë∆∞·ª£c t·∫°o!</h3>
            <p className="text-gray-600">D∆∞·ªõi ƒë√¢y l√† g·ª£i √Ω ho√†n ch·ªânh cho chuy·∫øn ƒëi c·ªßa b·∫°n</p>
          </div>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>{tripKey ? generatedItinerary[tripKey]?.tripName : ""}</span>
                <Badge variant="outline">
                  {tripKey && typeof generatedItinerary[tripKey]?.totalBudget === "number"
                    ? `${generatedItinerary[tripKey].totalBudget.toLocaleString("vi-VN")} VNƒê`
                    : "Kh√¥ng r√µ ng√¢n s√°ch"}
                </Badge>
              </CardTitle>
              <CardDescription>
                {formData.days} ng√†y t·∫°i {formData.destination}
              </CardDescription>
            </CardHeader>
          </Card>

          <div className="space-y-4">
            {tripKey && Array.isArray(itinerary) ? (
              itinerary.map((day: any) => (
                <Card key={day.day}>
                  <CardHeader className="pb-3">
                    <CardTitle className="text-lg">Ng√†y {day.day}</CardTitle>
                    <CardDescription>{day.date}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {day.activities.map((activity: any, index: number) => (
                        <div key={index} className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                          <div className="text-sm font-medium text-blue-600 min-w-[60px]">{activity.time}</div>
                          <div className="flex-1">
                            <h4 className="font-medium">{activity.name}</h4>
                            <p className="text-sm text-gray-600 flex items-center mt-1">
                              <MapPin className="h-3 w-3 mr-1" />
                              {activity.location}
                            </p>
                            <div className="flex items-center space-x-4 mt-2 text-xs text-gray-500">
                              <span className="flex items-center">
                                <Clock className="h-3 w-3 mr-1" />
                                {activity.duration}
                              </span>
                              <span className="flex items-center">
                                <DollarSign className="h-3 w-3 mr-1" />
                                {activity.cost.toLocaleString("vi-VN")} VNƒê
                              </span>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              ))
            ) : (
              <div className="text-red-500">Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch tr√¨nh h·ª£p l·ªá t·ª´ AI.</div>
            )}
          </div>

          <div className="flex space-x-3">
            <Button variant="outline" onClick={() => setStep(2)} className="flex-1">
              T·∫°o l·∫°i
            </Button>
            <Button onClick={handleCreateTrip} className="flex-1">
              <Heart className="h-4 w-4 mr-2" />
              L∆∞u l·ªãch tr√¨nh n√†y
            </Button>
          </div>
        </div>
      )
    }
  }

  return null
}
